// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package yue

import (
	"math/big"
	"time"

	"github.com/ethereum/go-ethereum/params"
	"github.com/taiyuechain/taiyuechain/common"
	"github.com/taiyuechain/taiyuechain/common/hexutil"
	"github.com/taiyuechain/taiyuechain/core"
	"github.com/taiyuechain/taiyuechain/yue/downloader"
	"github.com/taiyuechain/taiyuechain/yue/gasprice"
)

// MarshalTOML marshals as TOML.
func (c Config) MarshalTOML() (interface{}, error) {
	type Config struct {
		Genesis                 *core.Genesis `toml:",omitempty"`
		NetworkId               uint64
		SyncMode                downloader.SyncMode
		NoPruning               bool
		Whitelist               map[uint64]common.Hash `toml:"-"`
		LightServ               int                    `toml:"-"`
		LightPeers              int                    `toml:"-"`
		SkipBcVersionCheck      bool                   `toml:"-"`
		DatabaseHandles         int                    `toml:"-"`
		DatabaseCache           int
		TrieCleanCache          int
		TrieTimeout             time.Duration
		MinervaMode             int
		Host                    string
		CommitteeKey            hexutil.Bytes
		NodeCert                hexutil.Bytes
		P2PNodeCert             hexutil.Bytes
		Port                    int
		StandbyPort             int
		NodeType                bool
		GasPrice                *big.Int
		MinerGasCeil            *uint64
		MinerGasFloor           *uint64
		TxPool                  core.TxPoolConfig
		GPO                     gasprice.Config
		EnablePreimageRecording bool
		DocRoot                 string                         `toml:"-"`
		Checkpoint              *params.TrustedCheckpoint      `toml:",omitempty"`
		CheckpointOracle        *params.CheckpointOracleConfig `toml:",omitempty"`
	}
	var enc Config
	enc.Genesis = c.Genesis
	enc.NetworkId = c.NetworkId
	enc.SyncMode = c.SyncMode
	enc.NoPruning = c.NoPruning
	enc.Whitelist = c.Whitelist
	enc.LightServ = c.LightServ
	enc.LightPeers = c.LightPeers
	enc.SkipBcVersionCheck = c.SkipBcVersionCheck
	enc.DatabaseHandles = c.DatabaseHandles
	enc.DatabaseCache = c.DatabaseCache
	enc.TrieCleanCache = c.TrieCleanCache
	enc.MinervaMode = c.MinervaMode
	enc.TrieTimeout = c.TrieTimeout
	enc.Host = c.Host
	enc.Port = c.Port
	enc.MinerGasCeil = c.MinerGasCeil
	enc.MinerGasFloor = c.MinerGasFloor
	enc.StandbyPort = c.StandbyPort
	enc.CommitteeKey = c.CommitteeKey
	enc.NodeCert = c.NodeCert
	enc.P2PNodeCert = c.P2PNodeCert
	enc.NodeType = c.NodeType
	enc.GasPrice = c.GasPrice
	enc.TxPool = c.TxPool
	enc.GPO = c.GPO
	enc.EnablePreimageRecording = c.EnablePreimageRecording
	enc.DocRoot = c.DocRoot
	enc.Checkpoint = c.Checkpoint
	return &enc, nil
}

// UnmarshalTOML unmarshals from TOML.
func (c *Config) UnmarshalTOML(unmarshal func(interface{}) error) error {
	type Config struct {
		Genesis                 *core.Genesis `toml:",omitempty"`
		NetworkId               *uint64
		SyncMode                *downloader.SyncMode
		NoPruning               *bool
		Whitelist               map[uint64]common.Hash `toml:"-"`
		LightServ               *int                   `toml:"-"`
		LightPeers              *int                   `toml:"-"`
		SkipBcVersionCheck      *bool                  `toml:"-"`
		DatabaseHandles         *int                   `toml:"-"`
		DatabaseCache           *int
		TrieCleanCache          *int
		MinervaMode             *int
		Host                    *string
		Port                    *int
		StandbyPort             *int
		MinerGasCeil            *uint64
		MinerGasFloor           *uint64
		CommitteeKey            *hexutil.Bytes
		NodeCert                *hexutil.Bytes
		P2PNodeCert             *hexutil.Bytes
		TrieTimeout             *time.Duration
		NodeType                *bool
		TxPool                  *core.TxPoolConfig
		GasPrice                *big.Int
		GPO                     *gasprice.Config
		EnablePreimageRecording *bool
		DocRoot                 *string                   `toml:"-"`
		Checkpoint              *params.TrustedCheckpoint `toml:",omitempty"`
	}
	var dec Config
	if err := unmarshal(&dec); err != nil {
		return err
	}
	if dec.Genesis != nil {
		c.Genesis = dec.Genesis
	}
	if dec.NetworkId != nil {
		c.NetworkId = *dec.NetworkId
	}
	if dec.SyncMode != nil {
		c.SyncMode = *dec.SyncMode
	}
	if dec.NoPruning != nil {
		c.NoPruning = *dec.NoPruning
	}
	if dec.Whitelist != nil {
		c.Whitelist = dec.Whitelist
	}
	if dec.LightServ != nil {
		c.LightServ = *dec.LightServ
	}
	if dec.LightPeers != nil {
		c.LightPeers = *dec.LightPeers
	}
	if dec.SkipBcVersionCheck != nil {
		c.SkipBcVersionCheck = *dec.SkipBcVersionCheck
	}
	if dec.DatabaseHandles != nil {
		c.DatabaseHandles = *dec.DatabaseHandles
	}
	if dec.DatabaseCache != nil {
		c.DatabaseCache = *dec.DatabaseCache
	}
	if dec.TrieCleanCache != nil {
		c.TrieCleanCache = *dec.TrieCleanCache
	}
	if dec.MinervaMode != nil {
		c.MinervaMode = *dec.MinervaMode
	}
	if dec.TrieTimeout != nil {
		c.TrieTimeout = *dec.TrieTimeout
	}
	if dec.Host != nil {
		c.Host = *dec.Host
	}
	if dec.Port != nil {
		c.Port = *dec.Port
	}
	if dec.StandbyPort != nil {
		c.StandbyPort = *dec.StandbyPort
	}
	if dec.CommitteeKey != nil {
		c.CommitteeKey = *dec.CommitteeKey
	}
	if dec.NodeCert != nil {
		c.NodeCert = *dec.NodeCert
	}
	if dec.P2PNodeCert != nil {
		c.P2PNodeCert = *dec.P2PNodeCert
	}
	if dec.NodeType != nil {
		c.NodeType = *dec.NodeType
	}
	if dec.TxPool != nil {
		c.TxPool = *dec.TxPool
	}
	if dec.GasPrice != nil {
		c.GasPrice = dec.TxPool
	}
	if dec.MinerGasCeil != nil {
		c.MinerGasCeil = *dec.MinerGasCeil
	}
	if dec.MinerGasFloor != nil {
		c.MinerGasFloor = *dec.MinerGasFloor
	}
	if dec.GPO != nil {
		c.GPO = *dec.GPO
	}
	if dec.EnablePreimageRecording != nil {
		c.EnablePreimageRecording = *dec.EnablePreimageRecording
	}
	if dec.DocRoot != nil {
		c.DocRoot = *dec.DocRoot
	}
	if dec.Checkpoint != nil {
		c.Checkpoint = dec.Checkpoint
	}
	return nil
}
